From cba60cc4f1acce44acf7d72756a494444e4a5c68 Mon Sep 17 00:00:00 2001
From: Aravind Vaddi <vav263@nyu.edu>
Date: Wed, 20 Nov 2019 17:31:50 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 16 ++++++++++++++++
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 11 +++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 34 insertions(+)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..dab96e9 100644
--- a/proc.c
+++ b/proc.c
@@ -72,6 +72,7 @@ found:
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
+  p->tickets = 20;
 
   return p;
 }
@@ -280,10 +281,24 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    long max_tickets = 0;
+
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->state == RUNNABLE)
+            max_tickets += p->tickets;
+    }
+
+    long lottery_winner = random_at_most(max_tickets);
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      lottery_winner -= p->tickets;
+      if(lottery_winner > 0) {
+        continue;
+      }
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -297,6 +312,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+      break;
     }
     release(&ptable.lock);
 
diff --git a/proc.h b/proc.h
index 3b9c3ac..ca1b0dc 100644
--- a/proc.h
+++ b/proc.h
@@ -54,6 +54,7 @@ enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
+  int tickets;
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
   enum procstate state;        // Process state
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..5782f02 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,14 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void) {
+
+  int n;
+  if(argint(0, &n) < 0)
+    return -1;
+
+  proc->tickets = n;
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
2.17.1

